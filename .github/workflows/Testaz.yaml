name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read
  id-token: write

jobs:
  
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      TF_VAR_subscription_id: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      TF_VAR_tenant_id:  "${{ secrets.AZURE_TENANT_ID }}"
      TF_VAR_client_id: "${{ secrets.AZURE_CLIENT_ID }}"
    environment: dev

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: 'Az CLI login via OIDC'
      uses: azure/login@v1
      with:
           client-id: ${{ secrets.AZURE_CLIENT_ID }}
           tenant-id: ${{ secrets.AZURE_TENANT_ID }}
           subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: Azure CLI script
      uses: azure/CLI@v1
      with:
           azcliversion: latest
           inlineScript: |
               az account show
               az group list
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

   

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false -out tfplan
    
    - name: Terraform apply 
      run: terraform apply -auto-approve
